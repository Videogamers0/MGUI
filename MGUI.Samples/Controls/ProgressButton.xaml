<Window xmlns="clr-namespace:MGUI.Core.UI.XAML;assembly=MGUI.Core"
        Left="440" Top="20" MinHeight="0" Width="560" SizeToContent="Height" TitleText="Button" Padding="10">
    <Window.Styles>
        <Style TargetType="TextBlock">
            <Setter Property="FontSize" Value="10" />
        </Style>
        <Style Name="Header1" TargetType="TextBlock">
            <Setter Property="IsBold" Value="True" />
            <Setter Property="FontSize" Value="14" />
        </Style>
        <Style TargetType="Separator">
            <Setter Property="Margin" Value="0" />
            <Setter Property="Height" Value="2" />
            <Setter Property="Background" Value="White" />
            <Setter Property="Opacity" Value="0.25" />
        </Style>
        <Style TargetType="Expander">
            <Setter Property="Padding" Value="4" />
            <Setter Property="Background" Value="White * 0.1" />
        </Style>
    </Window.Styles>

    <ScrollViewer VerticalScrollBarVisibility="Auto" Background="rgb(64,64,64)" Padding="6,3">
        <StackPanel Orientation="Vertical" Spacing="10">
            <TextBlock StyleNames="Header1" Text="ProgressButton:" HorizontalAlignment="Center" />
            <Separator/>
            <TextBlock>
                [c=Turquoise]ProgressButtons[/c] are a mix between a [c=Turquoise]Button[/c] and a [c=Turquoise]ProgressBar[/c]. 
                They are buttons which render a progress bar overtop of the button's [c=Turquoise]Background[/c], but underneath the button's [c=Turquoise]Content[/c].
            </TextBlock>
            <Separator />
            <ProgressButton HorizontalAlignment="Left" Padding="15,5" ActionWhenProcessing="Reset" ActionWhenPaused="ResetAndResume" Duration="00:00:03">
                <TextBlock Text="Click me to start/reset\n my progress bar!" TextAlignment="Center" />
            </ProgressButton>

            <DockPanel>
                <TextBlock Dock="Top">
                    Set [c=Turquoise]Minimum[/c], [c=Turquoise]Maximum[/c], and [c=Turquoise]Value[/c] to control the completion percent of the progress bar.
                </TextBlock>
                <StackPanel Orientation="Vertical" Background="White * 0.1" Padding="4" Margin="0,4,0,0" Spacing="4">
                    <StackPanel.Styles>
                        <Style TargetType="ProgressButton">
                            <Setter Property="ActionWhenPaused" Value="None" />
                            <Setter Property="HorizontalAlignment" Value="Left" />
                            <Setter Property="Width" Value="200" />
                        </Style>
                    </StackPanel.Styles>
                    <ProgressButton Minimum="0" Maximum="100" Value="25" Content="Min0, Max100, Value25" />
                    <ProgressButton Minimum="0" Maximum="100" Value="80" Content="Min0, Max100, Value80" />
                    <ProgressButton Minimum="20" Maximum="50" Value="40" Content="Min20, Max50, Value40" />
                </StackPanel>
            </DockPanel>
            <Separator/>

            <DockPanel>
                <TextBlock Dock="Top">
                    Set [c=Turquoise]Duration[/c] to control how long the progress bar takes to reach 100% completion. 
                    If [c=Turquoise]Duration[/c] is null, you must manually set [c=Turquoise]Value[/c] to control the completion.
                </TextBlock>
                <StackPanel Orientation="Vertical" Background="White * 0.1" Padding="4" Margin="0,4,0,0" Spacing="5">
                    <StackPanel.Styles>
                        <Style TargetType="ProgressButton">
                            <Setter Property="Background" Value="Brown" />
                            <Setter Property="ProgressBarForeground" Value="DarkOrange" />
                            <Setter Property="HorizontalAlignment" Value="Left" />
                            <Setter Property="Width" Value="200" />
                            <Setter Property="ActionWhenProcessing" Value="None" />
                            <Setter Property="ActionWhenPaused" Value="None" />
                            <Setter Property="ActionOnCompleted" Value="Reset" />
                            <Setter Property="IsPaused" Value="false" />
                        </Style>
                    </StackPanel.Styles>
                    <ProgressButton Content="Duration=2s" Duration="00:00:02" />
                    <ProgressButton Content="Duration=3s" Duration="00:00:03" />
                    <ProgressButton Content="Duration=6s" Duration="00:00:06" />
                </StackPanel>
            </DockPanel>
            <Separator/>

            <DockPanel>
                <TextBlock Dock="Top">
                    Set [c=Turquoise]ActionWhenPaused[/c], [c=Turquoise]ActionWhenProcessing[/c], and [c=Turquoise]ActionWhenCompleted[/c] to control what the button does when left-clicked, 
                    depending on the state of the [c=Turquoise]IsPaused[/c] and [c=Turquoise]IsCompleted[/c] properties.
                </TextBlock>
                <StackPanel Orientation="Vertical" Background="White * 0.1" Padding="4" Margin="0,4,0,0" Spacing="2">
                    <ProgressButton Content="Clicking this resets the progress but does not pause it" Duration="00:00:03"
                                    IsPaused="False" ActionWhenProcessing="ResetAndResume" ActionWhenPaused="ResetAndResume" ActionOnCompleted="ResetAndResume" />
                    <DockPanel>
                        <Button Content="Reset" Dock="Right" CommandName="Button1_Reset" />
                        <ProgressButton Name="ProgressButton_1" Content="Clicking this toggles the [c=Turquoise]IsPaused[/c] state" Duration="00:00:03"
                                    IsPaused="False" ActionWhenProcessing="Pause" ActionWhenPaused="Resume" ActionOnCompleted="None" />
                    </DockPanel>
                    <ProgressButton Content="Clicking this does nothing" Value="45" ActionWhenProcessing="None" ActionWhenPaused="None" ActionWhenCompleted="None" />
                    <TextBlock>
                        You can also set [c=Turquoise]ActionOnCompleted[/c] to perform an action the moment it completes. 
                        Notice the name: Action[b]On[/b]Completed, executes the moment it completes (I.E. does not require user input), 
                        whereas Action[b]When[/b]Completed executes when clicked if [c=Turquoise]IsCompleted[/c]=[c=LightBlue][s=Blue]true[/s][/c].
                    </TextBlock>
                </StackPanel>
            </DockPanel>
            <Separator/>

            <DockPanel>
                <TextBlock Dock="Top">
                    Set [c=Turquoise]Orientation[/c] and [c=Turquoise]IsReversed[/c] to control if the progress bar is horizontal or vertical, and which direction it flows.
                </TextBlock>
                <StackPanel Orientation="Vertical" Background="White * 0.1" Padding="4" Margin="0,4,0,0" Spacing="5">
                    <StackPanel.Styles>
                        <Style TargetType="ProgressButton">
                            <Setter Property="Background" Value="Gray" />
                            <Setter Property="ProgressBarForeground" Value="Green" />
                            <Setter Property="ActionOnCompleted" Value="Reset" />
                            <Setter Property="IsPaused" Value="false" />
                            <Setter Property="Duration" Value="00:00:03" />
                            <Setter Property="HorizontalAlignment" Value="Left" />
                            <Setter Property="ActionWhenProcessing" Value="None" />
                        </Style>
                    </StackPanel.Styles>
                    <TextBlock Text="In these examples, the progress bar is [c=Green][s=Black 1 1]Green[/s][/c]. The [c=Gray][s=Black 1 1]Gray[/s][/c] portion represents the unfilled part of the progress bar. (I.E., the [c=Turquoise]Background[/c] of the button)" />
                    <ProgressButton Width="250" Orientation="Horizontal" IsReversed="False" Content="Orientation=Horizontal, IsReversed=false" />
                    <ProgressButton Width="250" Orientation="Horizontal" IsReversed="True" Content="Orientation=Horizontal, IsReversed=true" />
                    <StackPanel Orientation="Horizontal" Spacing="10">
                        <ProgressButton MinHeight="100" Orientation="Vertical" IsReversed="False">
                            <TextBlock Text="Orientation=\nVertical,\nIsReversed=\nfalse" />
                        </ProgressButton>
                        <ProgressButton MinHeight="100" Orientation="Vertical" IsReversed="True">
                            <TextBlock Text="Orientation=\nVertical,\nIsReversed=\ntrue" />
                        </ProgressButton>
                    </StackPanel>
                </StackPanel>
            </DockPanel>
            <Separator/>

            <DockPanel>
                <TextBlock Dock="Top">
                    Set [c=Turquoise]ProgressBarSize[/c], [c=Turquoise]ProgressBarAlignment[/c], and [c=Turquoise]ProgressBarMargin[/c] to control where the progress bar is rendered.
                    By default, it will stretch the entire bounds of the button.
                </TextBlock>
                <StackPanel Orientation="Vertical" Background="White * 0.1" Padding="4" Margin="0,4,0,0" Spacing="4">
                    <StackPanel.Styles>
                        <Style TargetType="ProgressButton">
                            <Setter Property="Background" Value="MediumPurple" />
                            <Setter Property="ProgressBarForeground" Value="LightSeaGreen" />
                            <Setter Property="ActionOnCompleted" Value="Reset" />
                            <Setter Property="IsPaused" Value="false" />
                            <Setter Property="Duration" Value="00:00:03" />
                            <Setter Property="HorizontalAlignment" Value="Left" />
                            <Setter Property="ActionWhenProcessing" Value="None" />
                        </Style>
                    </StackPanel.Styles>
                    <ProgressButton Width="200" ProgressBarSize="10" ProgressBarAlignment="RightOrBottom" Content="10px tall, aligned bottom" />
                    <ProgressButton Width="200" ProgressBarSize="3" ProgressBarAlignment="LeftOrTop" Content="3px tall, aligned top" />
                    <ProgressButton Width="200" ProgressBarAlignment="Stretch" ProgressBarMargin="4,4,4,4" Content="stretches with 4px margin on all sides" />
                </StackPanel>
            </DockPanel>
            <Separator/>

            <DockPanel>
                <TextBlock Dock="Top">
                    Set [c=Turquoise]ProgressBarBackground[/c], [c=Turquoise]ProgressBarForeground[/c], [c=Turquoise]ProgressBarBorderThickness[/c], and [c=Turquoise]ProgressBarBorderBrush[/c]
                    to modify the appearance of the progress bar.
                </TextBlock>
                <StackPanel Orientation="Vertical" Background="White * 0.1" Padding="4" Margin="0,4,0,0" Spacing="5">
                    <StackPanel.Styles>
                        <Style TargetType="ProgressButton">
                            <Setter Property="ActionOnCompleted" Value="Reset" />
                            <Setter Property="IsPaused" Value="false" />
                            <Setter Property="Duration" Value="00:00:03" />
                            <Setter Property="HorizontalAlignment" Value="Left" />
                            <Setter Property="ActionWhenProcessing" Value="None" />
                        </Style>
                    </StackPanel.Styles>
                    <ProgressButton Background="Gray" Width="220" ProgressBarSize="5" ProgressBarAlignment="RightOrBottom" ProgressBarBackground="Red" ProgressBarForeground="Green">
                        <TextBlock Text="[c=Red][s=Black 1 1]Red[/s][/c] [c=Turquoise]ProgressBarBackground[/c],\n[c=Green][s=Black 1 1]Green[/s][/c] [c=Turquoise]ProgressBarForeground[/c]" />
                    </ProgressButton>
                    <ProgressButton Width="220" ProgressBarSize="5" ProgressBarAlignment="RightOrBottom" ProgressBarBackground="Gray" ProgressBarForeground="DarkBlue">
                        <TextBlock Text="[c=Gray][s=Black 1 1]Gray[/s][/c] [c=Turquoise]ProgressBarBackground[/c],\n[c=DarkBlue][s=Black 1 1]DarkBlue[/s][/c] [c=Turquoise]ProgressBarForeground[/c]" />
                    </ProgressButton>
                    <ProgressButton Width="220" ProgressBarSize="5" ProgressBarAlignment="RightOrBottom" ProgressBarForeground="DarkBlue">
                        <TextBlock Text="[c=LightBlue][s=Black 1 1]null[/s][/c] [c=Turquoise]ProgressBarBackground[/c],\n[c=DarkBlue][s=Black 1 1]DarkBlue[/s][/c] [c=Turquoise]ProgressBarForeground[/c]" />
                    </ProgressButton>
                    <ProgressButton Background="MediumSeaGreen" Width="260" ProgressBarSize="12" ProgressBarAlignment="RightOrBottom" ProgressBarBackground="Red" ProgressBarForeground="Green"
                                    ProgressBarBorderThickness="3" ProgressBarBorderBrush="Gray" ProgressBarMargin="3" Padding="4,2,4,16">
                        <TextBlock Text="[c=Red][s=Black 1 1]Red[/s][/c] [c=Turquoise]ProgressBarBackground[/c],\n[c=Green][s=Black 1 1]Green[/s][/c] [c=Turquoise]ProgressBarForeground[/c],\n3px [c=Turquoise]ProgressBarBorderThickness[/c]\nusing a [c=Gray][s=Black 1 1]Gray[/s][/c] [c=Turquoise]ProgressBarBorderBrush[/c]" />
                    </ProgressButton>
                </StackPanel>
            </DockPanel>
            <Separator/>

            <DockPanel>
                <!--<TextBlock Dock="Top">
                    Description placeholder
                </TextBlock>-->
                <StackPanel Orientation="Vertical" Background="White * 0.1" Padding="4" Margin="0,4,0,0" Spacing="2">
                    <TextBlock>
                        Since [c=Turquoise]ProgressButtons[/c] can host any kind of [c=Turquoise]Content[/c] inside them, they're great for things like abilities with cooldowns:
                    </TextBlock>
                    <StackPanel Orientation="Horizontal" Spacing="5">
                        <StackPanel.Styles>
                            <Style TargetType="ProgressButton">
                                <Setter Property="IsPaused" Value="True" />
                                <Setter Property="ActionWhenPaused" Value="ResetAndResume" />
                                <Setter Property="ActionWhenProcessing" Value="None" />
                                <Setter Property="ActionWhenCompleted" Value="ResetAndPause" />
                                <Setter Property="ActionOnCompleted" Value="ResetAndPause" />
                                <Setter Property="Background" Value="DarkGray" />
                                <Setter Property="ProgressBarForeground" Value="Gray" />
                            </Style>
                        </StackPanel.Styles>
                        <ProgressButton Duration="00:00:01">
                            <Image Width="24" Height="24" SourceName="SkullOpen" />
                        </ProgressButton>
                        <ProgressButton Duration="00:00:01.5">
                            <Image Width="24" Height="24" SourceName="SkullClosed" />
                        </ProgressButton>
                        <ProgressButton Duration="00:00:03">
                            <Image Width="24" Height="24" SourceName="SkullAndCrossbones" />
                        </ProgressButton>
                        <ProgressButton Duration="00:00:06">
                            <Image Width="24" Height="24" SourceName="Ruby" />
                        </ProgressButton>
                    </StackPanel>
                    <TextBlock>
                        They're also great for Incremental/Clicker style games:
                    </TextBlock>
                    <Grid RowSpacing="3" ColumnSpacing="3" HorizontalAlignment="Left"
                          RowLengths="auto,auto" ColumnLengths="auto,130,auto,130">
                        <Grid.Styles>
                            <Style TargetType="ProgressButton">
                                <Setter Property="IsPaused" Value="True" />
                                <Setter Property="ActionWhenPaused" Value="ResetAndResume" />
                                <Setter Property="ActionWhenProcessing" Value="None" />
                                <Setter Property="ActionOnCompleted" Value="ResetAndPause" />
                                <Setter Property="MinHeight" Value="24" />
                            </Style>
                        </Grid.Styles>

                        <!-- Wood -->
                        <TextBlock Row="0" Column="0" VerticalAlignment="Center" Text="{MGBinding Path=WoodQty, Mode=OneWay, StringFormat='{}{0}x'}" />
                        <ProgressButton Name="WoodBtn" Row="0" Column="1" Background="Peru" ProgressBarForeground="Sienna" Content="Gather Wood" TextForeground="Black" Duration="00:00:01" />
                        
                        <!-- Huts -->
                        <TextBlock Row="0" Column="2" VerticalAlignment="Center" Text="{MGBinding Path=HutQty, Mode=OneWay, StringFormat='{}{0}x'}" />
                        <!-- This progress button is only enabled when player has at least 3 wood. 
                        The progress bar is only visible when unpaused, so that the ProgressBarBackground only gets rendered when it is processing.
                        Thus, the gray disabled background is only seen if (!CanBuildHut && !IsPaused) -->
                        <ProgressButton Name="HutBtn" Row="0" Column="3" Background="SandyBrown" ProgressBarForeground="Chocolate" ProgressBarBackground="SandyBrown" HideWhenPaused="True" 
                                        TextForeground="Black" DisabledTextForeground="Black" Content="Build Hut" Duration="00:00:05"
                                        IsEnabled="{MGBinding Path=CanBuildHut, Mode=OneWay}" DisabledBackground="Gray * 0.5" />

                        <!-- Stone -->
                        <TextBlock Row="1" Column="0" VerticalAlignment="Center" Text="{MGBinding Path=StoneQty, Mode=OneWay, StringFormat='{}{0}x'}" />
                        <ProgressButton Name="StoneBtn" Row="1" Column="1" Background="LightGray" ProgressBarForeground="Gray" Content="Gather Stone" TextForeground="Black" Duration="00:00:01.3" />
                        <TextBlock Row="1" Column="2" VerticalAlignment="Center" Text="{MGBinding Path=QuarryQty, Mode=OneWay, StringFormat='{}{0}x'}" />
                        <ProgressButton Name="QuarryBtn" Row="1" Column="3" Background="AliceBlue" ProgressBarForeground="CadetBlue" ProgressBarBackground="AliceBlue" HideWhenPaused="True" 
                                        TextForeground="Black" DisabledTextForeground="Black" Content="Build Quarry" Duration="00:00:07"
                                        IsEnabled="{MGBinding Path=CanBuildQuarry, Mode=OneWay}" DisabledBackground="Gray * 0.5" />
                    </Grid>
                    <TextBlock Text="[c=SandyBrown]Huts[/c] require 2x [c=Peru]Wood[/c]. [c=AliceBlue]Quarries[/c] require 3x [c=LightGray]Stone[/c]" />
                </StackPanel>
            </DockPanel>
            <Separator/>

            <!--<DockPanel>
                <TextBlock Dock="Top">
                    Description placeholder
                </TextBlock>
                <StackPanel Orientation="Vertical" Background="White * 0.1" Padding="4" Margin="0,4,0,0" Spacing="2">
                    <TextBlock>
                        Placeholder
                    </TextBlock>
                </StackPanel>
            </DockPanel>
            <Separator/>-->

            <Spacer Height="20" />

        </StackPanel>
    </ScrollViewer>
</Window>