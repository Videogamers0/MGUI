<Window xmlns="clr-namespace:MGUI.Core.UI.XAML;assembly=MGUI.Core"
        Left="440" Top="20" MinHeight="0" Width="560" SizeToContent="Height" TitleText="Button" Padding="10">
    <Window.Styles>
        <Style TargetType="TextBlock">
            <Setter Property="FontSize" Value="10" />
        </Style>
        <Style Name="Header1" TargetType="TextBlock">
            <Setter Property="IsBold" Value="True" />
            <Setter Property="FontSize" Value="14" />
        </Style>
        <Style TargetType="Separator">
            <Setter Property="Margin" Value="0" />
            <Setter Property="Height" Value="2" />
            <Setter Property="Background" Value="White" />
            <Setter Property="Opacity" Value="0.25" />
        </Style>
        <Style TargetType="Expander">
            <Setter Property="Padding" Value="4" />
            <Setter Property="Background" Value="White * 0.1" />
        </Style>
    </Window.Styles>

    <ScrollViewer VerticalScrollBarVisibility="Auto" Background="rgb(64,64,64)" Padding="6,3">
        <StackPanel Orientation="Vertical" Spacing="10">
            <TextBlock StyleNames="Header1" Text="Button:" HorizontalAlignment="Center" />
            <Separator/>
            <TextBlock>
                Buttons are rectangular clickable controls that can host arbitrary Content inside them.
            </TextBlock>
            <Separator />
            <Button Name="Button1" Content="Click me!" HorizontalAlignment="Left" Padding="15,5" />
            
            <DockPanel>
                <TextBlock Dock="Top">
                    [c=Turquoise]Buttons[/c] execute an Action when clicked.
                </TextBlock>
                <StackPanel Orientation="Vertical" Background="White * 0.1" Padding="4" Margin="0,4,0,0" Spacing="2">
                    <TextBlock>
                        Set [c=Turquoise]CommandName[/c] to associate a particular command to the [c=Turquoise]Button[/c].
                        Commands are stored in [c=Turquoise]MGResources.Commands[/c] (Use [c=Turquoise]MGResources.AddCommand[/c](...) to create one).
                        [c=Turquoise]MGResources[/c] instance is typically accessed via [c=Turquoise]MGDesktop.Resources[/c] (See also: [c=Turquoise]MGElement.GetDesktop[/c]() and [c=Turquoise]MGElement.GetResources[/c]() )
                    </TextBlock>
                    <Button CommandName="ReduceOpacity" HorizontalAlignment="Left" Content="Click me to reduce my [c=Turquoise]Opacity[/c] by 10%" />
                    <Spacer Height="5" />
                    <TextBlock>
                        Alternatively, set [c=Turquoise]Command[/c] to directly attach a delegate to the [c=Turquoise]Button[/c].
                    </TextBlock>
                    <Button Name="Button2" HorizontalAlignment="Left" Content="This [c=Turquoise]Button[/c] has a [c=Turquoise]Command[/c] that was set in c# code" />
                    <Spacer Height="5" />
                    <TextBlock>
                        If you need to execute several delegates when the button is clicked, subscribe to [c=Turquoise]OnLeftClicked[/c] or [c=Turquoise]OnRightClicked[/c].
                    </TextBlock>
                </StackPanel>
            </DockPanel>
            <Separator/>

            <DockPanel>
                <TextBlock Dock="Top">
                    [c=Turquoise]Buttons[/c] can host any arbitrary [c=Turquoise]Content[/c] inside them.
                </TextBlock>
                <StackPanel Orientation="Vertical" Background="White * 0.1" Padding="4" Margin="0,4,0,0" Spacing="2">
                    <TextBlock>
                        This [c=Turquoise]Button[/c] contains a [c=Turquoise]StackPanel[/c], which contains a colored [c=Turquoise]Rectangle[/c] and a [c=Turquoise]TextBlock[/c]
                    </TextBlock>
                    <Button Background="MediumPurple" BorderBrush="Purple" Padding="15,4" HorizontalAlignment="Left">
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                            <Rectangle VerticalAlignment="Center" Width="16" Height="16" Stroke="Black" StrokeThickness="1" Fill="MediumSeaGreen" />
                            <Spacer Width="5" />
                            <TextBlock VerticalAlignment="Center" Text="MediumSeaGreen" />
                        </StackPanel>
                    </Button>
                    <Spacer Height="5" />
                    <TextBlock>
                        This [c=Turquoise]Button[/c] contains an [c=Turquoise]Image[/c]
                    </TextBlock>
                    <Button Background="Brown" Padding="5" HorizontalAlignment="Left" BorderThickness="4">
                        <Button.BorderBrush>
                            <BandedBorderBrush>
                                <BorderBand Brush="rgb(50,50,50)" />
                                <BorderBand Brush="rgb(70,70,70)" />
                                <BorderBand Brush="rgb(100,100,100)" />
                                <BorderBand Brush="rgb(130,130,130)" />
                            </BandedBorderBrush>
                        </Button.BorderBrush>
                        <Image Width="24" Height="24" SourceName="Computer" />
                    </Button>
                    <Spacer Height="5" />
                    <TextBlock>
                        Don't ask me why you'd ever do this, but this [c=Turquoise]Button[/c] contains another [c=Turquoise]Button[/c] inside it.
                    </TextBlock>
                    <Button CommandName="OuterButtonCommand" Background="DarkOliveGreen" BorderBrush="DarkGreen" BorderThickness="1" Padding="10,6" BackgroundFocusedColor="White * 0.03">
                        <Button CommandName="InnerButtonCommand" Background="DarkKhaki" BorderBrush="DarkGray" BorderThickness="1" Padding="10,2">
                            <TextBlock Text="A [c=Turquoise][s=Black]Button[/s][/c] inside a [c=Turquoise][s=Black]Button[/s][/c].\nWhat is the world coming to?"
                                       TextAlignment="Center" />
                        </Button>
                    </Button>
                    <TextBlock Text="{MGBinding Path=TextBlock1Text, Mode=OneWay}" MinHeight="30" />
                </StackPanel>
            </DockPanel>
            <Separator/>

            <DockPanel>
                <TextBlock Dock="Top">
                    Set [c=Turquoise]IsRepeatButton[/c] to [c=LightBlue][s=Blue]True[/s][/c] to allow 
                    the button's [c=Turquoise]Command[/c] and/or [c=Turquoise]CommandName[/c] to execute repeatedly while the button is pressed and held (by the Left MouseButton).
                </TextBlock>
                <StackPanel Orientation="Vertical" Background="White * 0.1" Padding="4" Margin="0,4,0,0" Spacing="2">
                    <Button CommandName="RepeatButtonSample1" Content="Press and Hold me!" IsRepeatButton="True" HorizontalAlignment="Left" Padding="15,5" Background="DarkBlue" />
                    <Spacer Height="5" />
                    <TextBlock>
                        Set [c=Turquoise]InitialRepeatInterval[/c] and [c=Turquoise]RepeatInterval[/c] to control how often the RepeatButton repeatedly fires.
                    </TextBlock>
                    <Button CommandName="RepeatButtonSample2" HorizontalAlignment="Stretch" Padding="15,5" Background="DarkBlue"
                            Content="1.5s initial interval, then repeats 30 times per second" 
                            IsRepeatButton="True" InitialRepeatInterval="00:00:01.5" RepeatInterval="00:00:00.034" />
                    <Spacer Height="5" />
                    <TextBlock>
                        Repeat buttons are commonly used when docked to the right of a numeric display.
                    </TextBlock>
                    <StackPanel HorizontalAlignment="Left" Orientation="Horizontal">
                        <TextBlock Text="Enter your height in inches:" VerticalAlignment="Center" />
                        <Spacer Width="5" />
                        <DockPanel>
                            <Grid Dock="Right" RowLengths="*,*" ColumnLengths="auto">
                                <Grid.Styles>
                                    <Style TargetType="Button">
                                        <Setter Property="Background" Value="DarkBlue" />
                                        <Setter Property="MinHeight" Value="10" />
                                        <Setter Property="MinWidth" Value="14" />
                                        <Setter Property="Padding" Value="0" />
                                        <Setter Property="IsRepeatButton" Value="True" />
                                        <Setter Property="RepeatInterval" Value="00:00:00.1" />
                                    </Style>
                                </Grid.Styles>
                                <Button Name="Button_IncrementHeight" Row="0" Column="0" CommandName="RepeatButtonSample_IncrementHeight" />
                                <Button Name="Button_DecrementHeight" Row="1" Column="0" CommandName="RepeatButtonSample_DecrementHeight" />
                            </Grid>
                            <TextBox Background="DarkBlue" MinWidth="40" Text="{MGBinding HeightInches, Mode=TwoWay, FallbackValue=70}" VerticalContentAlignment="Center" />
                        </DockPanel>
                    </StackPanel>
                </StackPanel>
            </DockPanel>
            <Separator/>

            <DockPanel>
                <TextBlock Dock="Top">
                    Set [c=Turquoise]RenderScale[/c] to make the Button larger or smaller when hovered
                </TextBlock>
                <StackPanel Orientation="Vertical" Background="White * 0.1" Padding="4" Margin="0,4,0,0" Spacing="2">
                    <Button HorizontalAlignment="Center" RenderScale="1.1">
                        <TextBlock TextAlignment="Center" Text="This [c=Turquoise]Button[/c] uses [c=Turquoise]RenderScale[/c]=[c=LightBlue][s=Blue]1.1[/c][/s]\nHover it to see it appear 10% larger" />
                    </Button>
                    <Spacer Height="5" />
                    <TextBlock>
                        [c=Turquoise]RenderScale[/c] can also be applied to other types of Content, such as this [c=Turquoise]Image[/c]:
                    </TextBlock>
                    <Image HorizontalAlignment="Center" Stretch="Uniform" Width="40" Height="40" SourceName="SkullAndCrossbones" RenderScale="1.25" />
                </StackPanel>
            </DockPanel>
            <Separator/>

        </StackPanel>
    </ScrollViewer>
</Window>